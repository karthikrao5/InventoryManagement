routes

/v1
CRUD Equipments:

GET /equipments

	request json:

	{
		auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
		},

		/*
			at least one is required if search criteria is not presented.
		*/

		"id" : "ds2f13ds1f31dsf3ds",
		"department_tag" : "math-1234",
		"gt_tag" : "adfsdfsfds",

		/*
			search filters are ignored if at least one identifier is presented.
		*/

		"equipment_search_filter" :
		{
			"status" : "loaned",
			"loaned_to" : "bkang61",
			"created_on" : "some condition",
			"last_updated" : "some condition",
			"equipment_type_id" : "4564s56d4f6s",
			"equipment_type_name" : "laptop"
		},

		"equipment_attribute_filters" : [
			{
				"key" : "serial_number",
				"value" : "exact value or some condition"
			},
			{
				"key" : "serial_number2",
				"value" : "exact value or some condition"
			},
			{
				"key" : "serial_number3",
				"value" : "exact value or some condition"
			}
		]
	}

	response json:

	{
		"ok" => true,
		"msg" => "success or failure message.",
		"n" => 5,
		"equipments": [ {}, {}, {}, ..., {}] (array of equipment jsons)
	}

	sample equipment json:

	{
		"id" : "asdfs5f56sd5f56s",
		"department_tag" : "math-1234",
		"gt_tag" : null or "65sd4f65s4",
		"equipment_type_id" : "asdfsdf6s5f6s5df6",
		"equipment_type_name" : "laptop",
		"status" : "loaned",
		"loaned_to" : "bkang61",
		"created_on" : "2017-01-01 00:00:00",
		"last_updated" : "2017-01-02 00:00:00",
		"comment" : "some comment",

		"attributes" : [
			{
				"id" : "98sd4f9s5d4fsd5",
				"equipment_id" : "asdfs5f56sd5f56s",
				"equipment_type_attribute_id" : "66544646sd46fs54df",
				"name" : "serial_number",
				"value" : "DS6AF5DS4F6-454645DSF"
			},
			{
				"id" : "98sd4f9s5d4fsd5",
				"equipment_id" : "asdfs5f56sd5f56s",
				"equipment_type_attribute_id" : "665446d46sd46fds54df",
				"name" : "serial_number2",
				"value" : "DS6AF5DS4F6-454645DSF"
			}
		]

		"logs" : [
			{
				"id" : "sdfdsf5ddsd45f6sd",
				"reference_id" : "asdfs5f56sd5f56s", (this id will be either equipment type or equipment id.)
				"log_type" : "equipment"
				"timestamp" : "2017-01-01 00:00:00",
				"action_by" : "bkang61",
				"action_via" : "web" (name of apikey),
				"action_type" : "edit",
				"changes_on_equipment" : [
					{
						"affected_attribute": "status",
						"old_value" : "some previous value",
						"new_value" : "loaned"
					},
					{
						"affected_attribute": "comment",
						"old_value" : "some previous comment",
						"new_value" : "new comment"
					}
				]
				"changes_on_equipment_attribute" : [
					{
						"equipment_attribute_id": "98sd4f9s5d4fsd5",
						"affected_attributes" : [
							{
								"affected_attribute": "name",
								"old_value" : "some prev name",
								"new_value" : "serial_number"
							},
							{
								"affected_attribute": "value",
								"old_value" : null,
								"new_value" : "DS6AF5DS4F6-454645DSF"
							},
						]
					}
				]
			}
		]
	}

POST /equipments

request json:

{
	auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
		},

		"id" : "asdfs5f56sd5f56s",
		"department_tag" : "math-1234",
		"gt_tag" : null or "65sd4f65s4",
		"equipment_type_id" : "asdfsdf6s5f6s5df6",
		"equipment_type_name" : "laptop",
		"status" : "loaned",
		"loaned_to" : "bkang61",
		"created_on" : "2017-01-01 00:00:00",
		"last_updated" : "2017-01-02 00:00:00",
		"comment" : "some comment",

		"attributes" : [
			{
				"name" : "serial_number",
				"value" : "DS6AF5DS4F6-454645DSF"
			},
			{
				"name" : "serial_number2",
				"value" : "DS6AF5DS4F6-454645DSF"
			}
		]
}

response json:

	{
		"ok" => true,
		"msg" => "success or failure message."
	}

PUT /equipments

request json:

{
	auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
		},

		/* one of the following is required */

		"id" : "ds2f13ds1f31dsf3ds",
		"department_tag" : "math-1234",
		"gt_tag" : "adfsdfsfds",

		"changes_on_equipment" : {
			"department_tag" : "math-1234",
			"gt_tag" : null or "65sd4f65s4",
			"status" : "loaned",
			"loaned_to" : "bkang61",
			"comment" : "some comment"
		}

		"changes_on_equipment_attribute" : [
			{
				"equipment_attribute_id" : "65s4df56ds6f6",
				"name" : "new name",
				"value" : "new value"
			},
			{
				"equipment_attribute_id" : "65s4df56d456464s6f6",
				"name" : "new name",
				"value" : "new value"
			}
		]

		"add_attributes" : [
			{
				"name" : "some new attribute name",
				"value" : "some value"
			},
			{
				"name" : "some new attribute name",
				"value" : "some value"
			}
		],

		"remove_attributes" : [
			"468468ds46f84ds",
			"468468ds46f84ds"
		] (array of attribute ids)
}

response json:

{
	"ok" => true,
	"msg" => "success or failure message."
}

DELETE /equipments

request json:

{
	"auth": {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
		},

	/* one of the following must be present. */

	"equipment_id" : "45464654s5d4f6",
	"department_tag" : "math-1234",
	"gt_tag" : "6546546"
}

response json:

{
	"ok" : true,
	"msg" : "success or failure message."
}

CRUD EquipmentTypes:

GET /equipmenttypes

	Request JSON:

	{
		auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
		},
		"id" : "ds2f13ds1f31dsf3ds", (optional if name is present)
		"name" : "laptop", (optional if id is present)
		"equipment_type_attribute_names" : ["cpu", "serial_number"] (optional. if id or name is present, this unnecessary.)
	}

	If more than one of id, name, equipment_type_attribute_names is present, user must make sure that there is no error.
	For example, if id and name are present but not macthing, error will be returned. Same goes to equipment_type_attribute_names.

	Response JSON:

	{
		"ok" : true/false,
		"msg" : "success or failure message.",
		"equipment_types" : [ {}, {}, ...., {}] (array of equipment type jsons.)
	}

	what returned Equipment type json will look like:

	{
		"id": "sdfdsfs5f456s4d6f46",
		"name" : "laptop",
		"created_on" : "2017-01-01 00:00:00",
		"last_updated" : "2017-01-01 00:00:00",
		"comments" : "some comments here.",
		"equipment_type_attributes": [
			{
				"id": "sdfdsf5sd45f6sd",
				"name": "serial_number",
				"required": true,
				"unique": true,
				"data_type" : "string",
				"regex" : "some regex string",
				"help_comment" : "some comment",
				"enum" : true,
				"enum_values" : [
					"value1", "value2", "value3"
				],
				"default_value" : "default_value"
			},
			{
				"id": "sdfdsf5ddsd45f6sd",
				"name": "serial_number2",
				"required": true,
				"unique": true,
				"data_type" : "string",
				"regex" : "some regex string",
				"help_comment" : "some comment",
				"enum" : true,
				"enum_values" : [
					"value1", "value2", "value3"
				],
				"default_value" : "default_value"
			}
		],
		"logs" : [
			{
				"id" : "sdfdsf5ddsd45f6sd",
				"reference_id" : "sdfdsfs5f456s4d6f46", (this id will be either equipment type or equipment id.)
				"log_type" : "equipment_type"
				"timestamp" : "2017-01-01 00:00:00",
				"action_by" : "bkang61",
				"action_via" : "web" (name of apikey),
				"action_type" : "edit",
				"changes_on_equipment_type" : [
					{
						"affected_attribute": "name",
						"old_value" : "some previous value",
						"new_value" : "laptop"
					},
					{
						"affected_attribute": "comment",
						"old_value" : "some previous comment",
						"new_value" : "new comment"
					}
				]
				"changes_on_equipment_type_attribute" : [
					{
						"equipment_type_attribute_id": "sdfdsf5ddsd45f6sd",
						"affected_attributes" : [
							{
								"affected_attribute": "name",
								"old_value" : "some prev name",
								"new_value" : "serial_number"
							},
							{
								"affected_attribute": "enum",
								"old_value" : false,
								"new_value" : true
							},
						]
					}
				]
			}
		]
	}

POST /equipmenttypes

	post equipment type document to this route to create new equipment type.
	id fields are not required since backend will assign ids. If presented, backend will thrown an error.

	request json:

	{
		auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
		},
		"name" : "laptop",
		"comments" : "some comments here.",
		"equipment_type_attributes": [
			{
				"name": "serial_number",
				"required": true,
				"unique": true,
				"data_type" : "string",
				"regex" : "some regex string",
				"help_comment" : "some comment",
				"enum" : true,
				"enum_values" : [
					"value1", "value2", "value3"
				]
			},
			{
				"name": "serial_number2",
				"required": true,
				"unique": true,
				"data_type" : "string",
				"regex" : "some regex string",
				"help_comment" : "some comment",
				"enum" : true,
				"enum_values" : [
					"value1", "value2", "value3"
				]
			}
		]
	}

	logs are created and maintained by the backend.

	response json:
	{
		"ok" => true,
		"msg" => "success or failure message."
	}

PUT /equipmenttypes

	{
		auth: {
				apikey: "4564646465456d",
				user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
								if hook provides invalid user value backend will throw an error.)
			},

			/* one of the following is required */

			"id" : "ds2f13ds1f31dsf3ds",
			"department_tag" : "math-1234",
			"gt_tag" : "adfsdfsfds",

			"changes_on_equipment_type" : {
				"name" : "math-1234",
				"comment" : "some comment"
			}

			"changes_on_equipment_type_attribute" : [
				{
					"equipment_type_attribute_id" : "65s4df56ds6f6",
					"name": "serial_number",
					"required": true,
					"unique": true,
					"data_type" : "string",
					"regex" : "some regex string",
					"help_comment" : "some comment",
					"enum" : true,
					"enum_values" : [
						"value1", "value2", "value3"
					]
				},
				{
					"equipment_type_attribute_id" : "65s4dsdfsf56ds6f6",
					"name": "serial_number2",
					"required": true,
					"unique": true,
					"data_type" : "string",
					"regex" : "some regex string",
					"help_comment" : "some comment",
					"enum" : true,
					"enum_values" : [
						"value1", "value2", "value3"
					]
				}
			]

			"add_equipment_type_attributes" : [
				{
					"name": "serial_number3",
					"required": true,
					"unique": true,
					"data_type" : "string",
					"regex" : "some regex string",
					"help_comment" : "some comment",
					"enum" : true,
					"enum_values" : [
						"value1", "value2", "value3"
					]
				},
				{
					"name": "serial_number4",
					"required": true,
					"unique": true,
					"data_type" : "string",
					"regex" : "some regex string",
					"help_comment" : "some comment",
					"enum" : true,
					"enum_values" : [
						"value1", "value2", "value3"
					]
				}
			],

			"remove_equipment_type_attributes" : [
				"468468ds46f84ds",
				"468468ds46f84ds"
			] (array of equipment type attribute ids)
	}

	response json:
	{
		"ok" => true,
		"msg" => "success or failure message."
	}

DELETE /eqiupmenttypes

	request json:
	{
		auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
		},
		equipment_type_id: "456456s456d4f6s4fd6", (optional if equipment_type_name is present.)
		equipment_type_name: "laptop" (optional if equipment type id is present.)
	}

	response json:
	{
		"ok" => true,
		"msg" => "success or failure message."
	}

CRUD apikey

Product comes with a master apikey that has permission to add new apikey.
Master key can be configured during installation.
Master key has permission for all requests and routes in the system.
Regular keys only have access to get request.

GET /apikey

request json:

{
	auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
	},

	"name" : "api key name",
	"apikey" : "45464s56d4f6sd54f",

	/*
		Search option. Regular apikey cannot use "master_key" : true option.
	*/

	"get" : true,
	"post" : true,
	"put" : true,
	"delete" : true,
	"master_apikey" : true
}

response json:

{
	"apikey" : "apikey string",
	"master_apikey" : true
	"name" : "name assigned to this api key",

	"equipments_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}

	"equipment_types_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}

	"logs_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}

	logs: [
		{
			"id" : "sdfdsf5ddsd45f6sd",
			"reference_id" : "apikey string"
			"log_type" : "apikey"
			"timestamp" : "2017-01-01 00:00:00",
			"action_by" : "bkang61",
			"action_via" : "web" (name of apikey. web is one of the default master key.),
			"action_type" : "edit",

			"changes_on_equipments_permission": [
				{
					"affected_request" : "get",
					"old_value" : false,
					"new_value" : true
				}
			],

			"changes_on_equipment_types_permission": [
				{
					"affected_request" : "get",
					"old_value" : false,
					"new_value" : true
				}
			],

			"changes_on_logs_permission": [
				{
					"affected_request" : "get",
					"old_value" : false,
					"new_value" : true
				}
			]
		}
	]
}

POST /apikey

{
	auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
	},

	"apikey" : "apikey string",
	"master_apikey" : true
	"name" : "name assigned to this api key",

	"equipments_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}

	"equipment_types_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}

	"logs_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}
}

PUT /apikey

{
	auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
	},

	"apikey" : "apikey string",
	"master_apikey" : true
	"name" : "name assigned to this api key",

	"equipments_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}

	"equipment_types_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}

	"logs_permission" : {
		"get" : true,
		"set" : true,
		"put" : true,
		"delete" : true,
	}
}


DELETE /apikey

{
	auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
	},

	"apikey" : "apikey string"
}

CRUD Logs

CUD operations are done by the system. User can only perform R operation on logs.

GET /logs
{
	auth: {
			apikey: "4564646465456d",
			user: "bkang61", (optional if apikey holder is not frontend. "hooks" need to register their apikeys.
							if hook provides invalid user value backend will throw an error.)
	},

	/* search filters. */

	"date_from" : "some date",
	"date_to" : "some other date",
	"log_types" : [
		"apikey", (only works when authenticated with master key"
		"equipment_type",
		"equipment"
	]

	"reference_id" : "sdfdsfs5f456s4d6f46"
	"action_by" : "bkang61",
	"action_via" : "web" (name of apikey. web is one of the default master key.),
	"action_type" : "edit",
}
