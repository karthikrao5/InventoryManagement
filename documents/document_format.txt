This document explains formats of the JSON document will be used in this project.
I know this is very lengthy, but please read over before you do any work related to DB.
Ask Byung for any questions.

This document will be updated as the project progresses.

1. Equipment

	Equipment document is in "equipments" collection (table) in the database.
	This represents an equipment that is tracked in the system and consists of 3 parts,
	common fields, equipment type specific fields, and logs.

	a. common fields
	
	These fields must be in all equipment documents except "_id", "created_on", "last_updated" fields.
	
	"_id" - This field is automatically generated by the database during insertion.
			It is an unique identifier in the DB and used internally. This value is not 
			known/exposed to end-users including hooks. Do not put this field for any insert or update operation.
			
	"department_tag" - This field is also an unique identifier in the collection.
					   IT admins are responsible for generating this value. 
					   It is suggested to use <department code>-<any digit (resonable) alphanumerics>.
					   For example, math department can have a department tag such as "MATH-AAB12X288"
					   To give flexibility to each department, this field value's format is unchecked.
					   However, the system checks it's uniqueness. Insert operation will fail if the given
					   department tag exists. Field value data type is string and value cannot be null.
					   
	"gt_tag" - Similar to "department_tag", data type is string and only uniqueness is checked.
			   However, this field's value can be null.
	
	"equipment_type" - Data type is string and value cannot be null. This field is the reference to 
					   documents in "equipmenttype" collection. Equipment type document defines equipment
					   specific fields and their attributes. 
					   
					   For example, there can be a document in "equipmenttype" collection that has
					   "equipment_type" : "laptop" key value pair.
					   
					   In this document, there is a key value pair 
					   
					   "serialnumber" : ["required", "unique" "string", "[a-zA-Z0-9]+-[a-zA-Z0-9]", "Do not put a dummy serial."]
					   
					   key - field (key) name.
					   array[0] - "required" = not null or "optional" = null ok. Field value cannot be null in this example.
					   array[1] - "unique" = checks uniqueness among same type. If duplicate is found, insert/update will fail.
								  "not unique" = duplicates are ok.
					   array[2] - Indicate's data type. Data type is string in this example.
					   array[3] - Data format in regex. This is only supported if data type is string. If data type is other than string,
								  then any legal value is accepted. We can allow this to check for other types later but it is not a priority.
								  
					   array[4] - Help or suggestion comment. IT admins can use this field to enter suggestions or help comments.
					              In this example, IT admins are suggested to not to put a dummy/random serial.
	
	"status" - Must be one of the following: 
			   "inventory" - Ready for loan. 
			   "loaned" - Loaned to renters.
			   "surplussed" - Surplussed.
			   "trashed" - Trashed.
	
	"loaned_to" - Data type is string. It is IT admin's responsibility to enter correct value.
				  It is suggested to use gtid (gatech login).
	
	"created_on" - Equipment creation (insertion) timestamp. This is automatically generated by the database.
				   Do not include this field for insert/update operation.
				   
	"last_updated" - Equpment update timestamp. This is automatically generated by the database.
					 Do not include this field for insert/update operation.
	
	"comment" - Data type is string. Any comment about the equipment.
	
	b. equipment specific fields.
	
	Simple list of key value pairs. This is not array. Just list each key value pair in the document. 
	For example,
	
	"serialnumber" : "afadfasdfadsfa",
	"num_cores" : 12,
	
	...
	
	"screen_size" : 15.6,
	
	c. logs
	
	key is "logs" and value is array of log documents. This array is ordered by the timestamp in 
	log document in descending order.
	Please refer to Logs document explanation.
	
	Example (stored in DB):
	
		{
			"_id" : ObjectId("48949f8d84f8ec0e44d558"),
			"department_tag" : "MATH-AAB12X288",
			"gt_tag" : null,
			"equipment_type" : "laptop",
			"status" : "loaned",
			"loaned_to" : "bkang61",
			"created_on" : ISODate("2017-01-01T08:13:17.009Z"),
			"last_updated" : ISODate("2017-01-29T08:13:17.009Z"),
			"comment" : "Battery is bad but renter doesn't care. Replace the battery when he complains."
			
			"make" : "DELL",
			"cpu_model_number" : "i7-7700HQ",
			"os" : "Windows 10 Pro",
			
			"logs" :
				{
					"_id" : ObjectID("se8f48f8e4fddd884fd"),
					"timestamp" : ISODate("2017-01-29T08:13:17.009Z"),
					"action_by" : "bkang61",
					"action_via" : "API",
					"changes" : 
				
						[
							{
								"affected_attribute" : "status",
								"current_value" : "inventory",
								"new_value" : "loaned"
							},
						
							{
								"affected_attribute" : "loaned_to",
								"current_value" : null,
								"new_value" : "bkang61"
							}
						]
				}
		}
	
2. Equipment Type

	a. common fields
	
	"_id" - same as Equipment. Autogenerated.
	"equipment_type" - Data type is string and it serves as an unique id in "equipmenttype" collection.
	
	b. equipment type specific fields
	
	This is the tricky part. Part b consists of list (not array) of key value pairs separated by a comma.
	Each key is the name of the field and each value is an array of 5 elements.
	The array contains attributes (or conditions) of the field value.
	
	Here is an example:
	
	"serialnumber" : ["required", "unique" "string", "[a-zA-Z0-9]+-[a-zA-Z0-9]", "Do not put a dummy serial."]
					   
    key - field (key) name.
    array[0] - "required" = not null or "optional" = null ok. Field value cannot be null in this example.
    array[1] - "unique" = checks uniqueness among same type. If duplicate is found, insert/update will fail.
 			  "not_unique" = duplicates are ok.
    array[2] - Indicate's data type. Data type is string in this example.
    array[3] - Data format in regex. This is only supported if data type is string. If data type is other than string,
 			  then any legal value is accepted. We can allow this to check for other types later but it is not a priority.
			  Empty string or null indicates no format check.
 			  
    array[4] - Help or suggestion comment. IT admins can use this field to enter suggestions or help comments.
 			  In this example, IT admins are suggested to not to put a dummy/random serial.
			  Empty string or null indicates no comment. UI may not show help button for this particular field.
			  
	So if there is an equipment document that has "equipment_type" : "laptop" and if the equipment type document
	"laptop" has the example key value pair in its part b, then the equipment document must have a key value pair
	that has key = "serialnumber" and value can be "fafasdf4564-5498asdfd".
	
	For now, value type does not support array or document but this can be added as the project progress.
	
	If values can be enumerable, what will be the best way to represent it as json?
	
	Example (stored in DB):
	
	{
		"_id" : ObjectID("6846846sd4f68d4f6884fd"),
		"equipment_type" : "laptop",
		"make" : ["required", "not_unique", "string", "", "Use all caps."],
		"cpu_model_number" : ["required", "not_unique", "string", "", "Follow exact name from manufacturer."],
		"os" : ["optional", "not_unique", "string", "", ""]
	}

3. Log

   It is mongoDB's best practice to have duplicate information rather than having references,
   so each log document will be present in both "logs" collection (table) and inside of equipment document.
   
   "_id" - same as other documents. Autogenerated.
   "timestamp" - timestamp of the log creation.
   "action_by" - gtid (login name).
   "action_via" - name attached to api key. For example, API key "F4S68DF46S8DF46SD84" can be assigned to "WEB".
				  This means that our web front end must use that API key for any requests and this will be logged
				  in this field. In this example, field value will be "WEB".
   "changes" - array of mini document and timestamp
			   [
				{
					"affected_attribute" : "status",
					"current_value" : "inventory",
					"new_value" : "loaned"
				},
				
				{
					"affected_attribute" : "loaned_to",
					"current_value" : null,
					"new_value" : "bkang61"
				}
			   ]
			   
	Example (stored in DB):
	
	{
		"_id" : ObjectID("se8f48f8e4fddd884fd"),
		"timestamp" : ISODate("2017-01-29T08:13:17.009Z"),
		"action_by" : "bkang61",
        "action_via" : "API",
		"changes" : 
		
			[
				{
					"affected_attribute" : "status",
					"current_value" : "inventory",
					"new_value" : "loaned"
				},
				
				{
					"affected_attribute" : "loaned_to",
					"current_value" : null,
					"new_value" : "bkang61"
				}
			]
	}